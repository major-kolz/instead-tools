Сопроводить примерами. Для cutscene можно переписать воспоминания из "Провала". Разбить их на несколько комнат, определить _cutDefTxt как изображение, придумать для чего использовать update (кроме изменения имени). 
В example1 должен быть пример использования useful. Там же - использование string.format. 
prnd можно использовать и для вывода сообщений с определенной вероятностью: prnd {true, true, true, "txt"} - выведет текст с вероятностью 1 к 4.

minIDE, assit, CLI с возможностями:
- Подготовить папку
- Подготовить архив (исключить swap-файлы vim, аналогичные у gedit и emacs, не включать сам скрипт, проверить соответствие музыки нижнему регистру (дублируя замечание в notify-send))

InsteadIDE 
	- По F7 выводить не только dlg, но и вообще все производные от room вещи (cutscene, keyboard, ...)

Классы:
- Машина состояний
- Кодовый замок (с переходом в другую комнату; можно и картотеки на основе делать)
- Замок (добавляют переход в дверь)
- Хранилища
- Апостериорное меню (объекты с широкой областью применения, что её нельзя сузить исходя из контекста)
- Метакласс, что позволяет реализовывать обобщенную реакцию на воздействие предметом. Дабы ни ружье из "Провала", ни посох из "Новогодней сказки" не пришлось реализовывать руками (и делать обычную ошибку, когда логичное воздействие не проходит.
- Класс dropList, переопределяющий disp (добавляет [+]) и menu (s.obj:disable_all()) объекта. Было бы красиво проходится еще по всем вложенным объектам и еще переопределять их disp (offset_ + точка по центру)

useful:
- Если в _if и _trig cond записан с символом #, то это глобальная переменная
- Ознакомительная часть в phrase. Выделяется с обоих сторон какими-то комбинациями символов. В первый раз показываем полную фразу, в последующие - без обрамленного фрагмента

Lua vim, подсветка:
- Перенести куда-то под руку, в один файл
- Выделять как-то скобки у длинных строк, содержащих перевод строки
- local/return function end одним цветом выделять
- Подсвечивать ошибку, если в таблице поле/метод не завершен терминатором
- Подсвечивать ошибку, если внутри [[]] находятся \"\" (а текст в кавычках можно подавать курсивом)
- (частично готово) Автоматический перевод строк, чтобы на одном уровне были

Узнал про MoonScrpit - даже чуть потряхивает от предвкушения :) 
- Чисто визуально краше выглядит (местный switch меня покорил; хотя выигрывает на чисто натуральных числах)
- expressions against statements 
- Более лаконичный синтаксис для функций (отдельное спасибо стоит сказать за => и запись self.value в виде @value)
- Ручонки тянутся попробовать местные классы на obj и room (в конструкторе определить все базовые вещи, вроде оформления списком и добавления параметров вроде isObject/isRoom). Хотя, на деле, будем передавать обработчики полей в конструктор, а не в функцию - большая ли разница? Пожалуй, можно определить nouse для всех да еще classes куда логичнее будет выглядеть. Говорил о конструкторе - ерунда. Можно использовать синтаксис в стиле:
	myRoom = with Room!
		.nam = "Bedroom"
		.left = (to) => p "I close the door"		-- не особо симпатично
