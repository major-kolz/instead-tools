Сопроводить примерами. Для cutscene можно переписать воспоминания из "Провала". Разбить их на несколько комнат, определить _cutDefTxt как изображение, придумать для чего использовать update (кроме изменения имени). В example1 должен быть пример использования useful. Там же - использование string.format

minIDE, assit, CLI с возможностями:
- Подготовить папку
- Подготовить архив (исключить swap-файлы vim, аналогичные у gedit и emacs, не включать сам скрипт, проверить соответствие музыки нижнему регистру (дублируя замечание в notify-send))

Статический анализатор кода. Предложить, чтобы код прогонялся самим INSTEAD'ом, при запуске его с параметром debug. Функциональность:
	- Изменяемые переменные, что не записываются в файл сохранения
	- Табличная переменная и функция с таблицей-аргументом (некорректное использование).
	- Несоответствие регистра в именах вызываемых ресурсов (для Windows пользователей)
	- Если у объекта нет ни dsc, ни inv - то что-то тут не так
	- Последовательный обход lua-фалов, начиная с main и далее по require'ам
	- Безответные ссылки на xact
	- dsc, завершаемые не точкой

InsteadIDE должна уметь "обернуть заново" строки в кавычках на строки формата [[]]

Классы:
- Машина состояний
- Кодовый замок (с переходом в другую комнату; можно и картотеки на основе делать)
- Замок (добавляют переход в дверь)
- Хранилища
- Апостериорное меню (объекты с широкой областью применения, что её нельзя сузить исходя из контекста)
- Метакласс, что позволяет реализовывать обобщенную реакцию на воздействие предметом. Дабы ни ружье из "Провала", ни посох из "Новогодней сказки" не пришлось реализовывать руками (и делать обычную ошибку, когда логичное воздействие не проходит.

useful:
- Если в _if и _trig cond записан с символом #, то это глобальная переменная
- Ознакомительная часть в phrase. Выделяется с обоих сторон какими-то комбинациями символов. В первый раз показываем полную фразу, в последующие - без обрамленного фрагмента

